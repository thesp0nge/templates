#!/usr/bin/env python3

import sys
import logging
from string import ascii_uppercase, ascii_lowercase, digits

# pattern_gen code is taken from
# https://github.com/Svenito/exploit-pattern/blob/master/pattern.py

# There are 26 uppercase, 26 lowercase and 10 digits... 6760 possible
# combinations. Since we want to create a 3 chars length string for every
# combination the total length will be 6760*3=20280
MAX_PATTERN_LENGTH = 20280

def pattern_gen(length):
    """
    Generate a pattern of a given length
    """
    if length >= MAX_PATTERN_LENGTH:
        raise Exception('ERROR: Pattern length exceeds maximum of %d' % MAX_PATTERN_LENGTH)

    pattern = ''
    for upper in ascii_uppercase:
        for lower in ascii_lowercase:
            for digit in digits:
                if len(pattern) < length:
                    pattern += upper+lower+digit
                else:
                    out = pattern[:length]
                    return out

def fill_the_noise(filename="evil.txt", count=5000, pattern=False):

  if pattern:
    evil = pattern_gen(count)
  else:
    evil="A" * count

  f=open(filename, "w")
  f.write(evil)
  f.close()

  logging.info('%s created' % filename)


if __name__ == "__main__":
  logging.basicConfig(format='%(asctime)s - %(message)s', level=logging.DEBUG, datefmt='%d-%b-%y %H:%M:%S')
  fill_the_noise("evil.txt", 200, True)
